# Global Variables
variables:
  TF_ROOT: tf/

# Workflow Variables
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      variables:
        ENVIRONMENT_NAME: development
        ENVIRONMENT_URL: https://circulo.dev
        TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/develop
    - if: '$CI_COMMIT_BRANCH == "develop"'
      variables:
        ENVIRONMENT_NAME: development
        ENVIRONMENT_URL: https://circulo.dev
        TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/develop
        RUN_ALL: 'true'
    - if: '$CI_COMMIT_BRANCH == "test"'
      variables:
        ENVIRONMENT_NAME: testing
        ENVIRONMENT_URL: https://test.circulosonar.com
        TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/test
        RUN_ALL: 'true'
    - if: '$CI_COMMIT_BRANCH == "main"'
      variables:
        ENVIRONMENT_NAME: production
        ENVIRONMENT_URL: https://circulosonar.com
        TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/production
        RUN_ALL: 'true'

# Base States
stages:
  - init
  - analyze
  - build
  - plan
  - deploy

# Terraform
init_tf:
  stage: init
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - '**/*.tf'
    - if: '$RUN_ALL == "true"'
      when: always
  image:
    name: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform validate
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  cache:
    key: '${TF_ROOT}'
    paths:
      - ${TF_ROOT}/.terraform/
      - ${TF_ROOT}/.terraform.lock.hcl

build_web:
  stage: build
  image:
    name: node:latest
  script:
    # Construct .env file
    - echo REACT_APP_BASE_API_DOMAIN=${BASE_API_DOMAIN} >> .env
    - echo REACT_APP_COGNITO_REGION=${COGNITO_REGION} >> .env
    - echo REACT_APP_COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID} >> .env
    - echo REACT_APP_COGNITO_USER_POOL_WEB_CLIENT_ID=${COGNITO_USER_POOL_WEB_CLIENT_ID} >> .env
    - echo REACT_APP_COGNITO_REDIRECT_SIGNIN=${COGNITO_REDIRECT_SIGNIN} >> .env
    - echo REACT_APP_COGNITO_REDIRECT_SIGNOUT=${COGNITO_REDIRECT_SIGNOUT} >> .env
    - echo REACT_APP_COGNITO_DOMAIN=${COGNITO_DOMAIN} >> .env
    - echo REACT_APP_DOPPLER_DASHBOARD_URL=${DOPPLER_DASHBOARD_URL} >> .env

    # Build Application
    - yarn install --prefer-offline
    - yarn build
  cache:
    key: 'node_modules'
    paths:
      - node_modules
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  artifacts:
    paths:
      - build

plan_terraform:
  stage: plan
  dependencies:
    - build_web
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - '**/*.tf'
    - if: '$RUN_ALL == "true"'
      when: always
  image:
    name: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  cache:
    key: '${TF_ROOT}'
    paths:
      - ${TF_ROOT}/.terraform/
      - ${TF_ROOT}/.terraform.lock.hcl
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  artifacts:
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

deploy:
  stage: deploy
  dependencies:
    - build_web
    - plan_terraform
  image:
    name: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform apply
  when: manual
  environment:
    name: $ENVIRONMENT_NAME
    url: $ENVIRONMENT_URL
  only:
    variables:
      - $CI_COMMIT_BRANCH == "develop"
      - $CI_COMMIT_BRANCH == "test"
      - $CI_COMMIT_BRANCH == "main"
